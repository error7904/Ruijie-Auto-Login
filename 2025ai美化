#!/bin/sh

# 校园网认证脚本美化版 - 专为OpenWRT优化
# 使用方法: ./ruijie_student.sh 用户名 密码

# 定义颜色和样式
RED='\033[1;31m'
GREEN='\033[1;32m'
YELLOW='\033[1;33m'
BLUE='\033[1;34m'
CYAN='\033[1;36m'
NC='\033[0m' # 无颜色

BOLD='\033[1m'
UNDERLINE='\033[4m'

# 打印带格式的消息
print_status() {
    echo -e "${BOLD}${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${BOLD}${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${BOLD}${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${BOLD}${RED}[ERROR]${NC} $1"
}

print_debug() {
    echo -e "${BOLD}${CYAN}[DEBUG]${NC} $1"
}

# 打印分隔线
print_separator() {
    echo "============================================================"
}

# 打印标题
print_header() {
    echo
    print_separator
    echo -e "${BOLD}${CYAN}          校园网锐捷认证脚本 (OpenWRT)${NC}"
    echo -e "${BOLD}${CYAN}          版本: 2.0 | 作者: 学长${NC}"
    print_separator
    echo
}

# 打印底部信息
print_footer() {
    echo
    print_separator
    echo -e "${BOLD}${CYAN}        脚本执行完成 - $(date +"%Y-%m-%d %H:%M:%S")${NC}"
    print_separator
    echo
}

# 检查参数数量
print_header
if [ "${#}" -lt "2" ]; then
    print_error "参数不足!"
    echo -e "${BOLD}用法: ${0} username password${NC}"
    echo -e "${BOLD}示例: ${0} 0000000000 123456${NC}"
    print_footer
    exit 1
fi

# 显示当前用户和网络信息
print_status "用户: $1"
print_status "开始执行网络连接检查..."

# 检查网络连接状态
check_network() {
    print_status "检查网络连接状态..."
    captiveReturnCode=$(curl -s -I -m 10 -o /dev/null -w "%{http_code}" http://www.google.cn/generate_204 2>/dev/null)
    
    if [ "${captiveReturnCode}" = "204" ]; then
        print_success "网络连接正常，无需认证"
        return 0
    else
        print_warning "网络未连接或需要认证 (HTTP代码: ${captiveReturnCode})"
        return 1
    fi
}

# 如果已经在线，直接退出
if check_network; then
    print_footer
    exit 0
fi

# 开始认证流程
print_status "开始锐捷认证流程..."

# 获取锐捷登录页面URL
print_status "获取登录页面URL..."
loginPageURL=$(curl -s "http://www.google.cn/generate_204" | awk -F \' '{print $2}')

if [ -z "${loginPageURL}" ]; then
    print_error "无法获取登录页面URL"
    print_footer
    exit 1
fi

print_debug "登录页面URL: ${loginPageURL}"

# 构建登录URL
loginURL=$(echo "${loginPageURL}" | awk -F \? '{print $1}')
loginURL="${loginURL/index.jsp/InterFace.do?method=login}"

service="DianXin"
queryString="wlanuserip=94ca20c0fb0e777ea4972aaa297a8f3e&wlanacname=643d07a46528c937f09836d589740409&ssid=&nasip=cc5b64e516a1fa61d915e184b913e171&snmpagentip=&mac=e9610ea931d21016b0af5fed148bfe73&t=wireless-v2&url=418b8bb474ba4db13cc1f6dc4a2e7e2b147e5d21f7c9202b&apmac=&nasid=643d07a46528c937f09836d589740409&vid=e7e9ec1de0977a03&port=2dbe874bc250c5f9&nasportid=489ecc80e9f86aea0ba5dc4a08edd8a223dbed083ee5e03fe78d14a5ae3564de"
queryString="${queryString//&/%2526}"
queryString="${queryString//=/%253D}"

print_status "向认证服务器发送请求..."
# 发送锐捷认证请求
if [ -n "${loginURL}" ]; then
    authResult=$(curl -s -A "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.91 Safari/537.36" \
        -e "${loginPageURL}" \
        -b "EPORTAL_COOKIE_USERNAME=; EPORTAL_COOKIE_PASSWORD=; EPORTAL_COOKIE_SERVER=; EPORTAL_COOKIE_SERVER_NAME=; EPORTAL_AUTO_LAND=; EPORTAL_USER_GROUP=; EPORTAL_COOKIE_OPERATORPWD=;" \
        -d "userId=${1}&password=${2}&service=${service}&queryString=${queryString}&operatorPwd=&operatorUserId=&validcode=&passwordEncrypt=false" \
        -H "Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8" \
        -H "Content-Type: application/x-www-form-urlencoded; charset=UTF-8" \
        "${loginURL}")
    
    # 解析认证结果
    echo
    print_status "认证服务器响应:"
    print_separator
    
    # 尝试解析JSON响应
    if echo "$authResult" | grep -q "result"; then
        result=$(echo "$authResult" | grep -o '"result":"[^"]*"' | cut -d'"' -f4)
        message=$(echo "$authResult" | grep -o '"message":"[^"]*"' | cut -d'"' -f4 2>/dev/null || echo "无详细信息")
        
        if [ "$result" = "success" ]; then
            print_success "认证成功!"
            print_success "服务器消息: $message"
        else
            print_error "认证失败!"
            print_error "错误信息: $message"
        fi
    else
        # 非JSON响应，直接显示
        print_debug "原始响应:"
        echo "$authResult"
    fi
    
    print_separator
    
    # 验证认证结果
    print_status "验证网络连接状态..."
    sleep 2  # 等待网络状态更新
    
    if check_network; then
        print_success "校园网认证成功，网络已连接!"
    else
        print_error "认证可能未成功，网络连接失败"
        print_warning "请检查用户名和密码是否正确"
    fi
else
    print_error "登录URL构建失败"
fi

print_footer
